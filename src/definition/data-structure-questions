Please answer the below Data Structure Questions:

why do we need data structure?
Data structure is a particular way of storing and organizing information in a computer so that it
 can be retrieved and used most productively. Data structures are used in almost every program or software system.

What are the various operations that can be performed on different Data Structures?
a. insertion
b. deletion
c. searching
d. sorting

List out the areas in which data structures are applied extensively?
Compiler Design,
· Operating System,
· Database Management System,
· Statistical analysis package,
· Numerical Analysis,
· Graphics,
· Artificial Intelligence,
· Simulation

what is an Array?
An array is a container object that holds a fixed number of values of a single type. The length of an array is established when the array is created. After creation, its length is fixed.
what is the difference between the Array and ArrayList?
Arrays and ArrayList are used to hold values of a type.
Arrays are fixed length. Once the length is created, you can not change it. ArrayList is variable length. You can expand the length whenever you want.
Arrays can only store primitive data types and objects. ArrayList can store objects and generics.

what is LinkedList?
LinkedList is a data structure simiar to ArrayList. However, it is easier and faster to insert new elements in between existing elements.
The important points about Java LinkedList are:
Java LinkedList class can contain duplicate elements.
Java LinkedList class maintains insertion order.
Java LinkedList class is non synchronized.
In Java LinkedList class, manipulation is fast because no shifting needs to be occurred.
Java LinkedList class can be used as list, stack or queue.
How is an Array different from Linked List?
The major difference between Array and Linked list regards to their structure. Arrays are index based data structure where each element associated with an index. On the other hand, Linked list relies on references where each node consists of the data and the references to the previous and next element.

what is queue?
A queue is a type of data structure in which it is designed to have elements inserted at the end of the queue, and elements removed from the beginning of the queue.
what is stack?
A stack is a data structure that allows data to be inserted (a 'push' operation), and removed (a 'pop' operation). Many stacks also support a read ahead (a 'peek' operation), which reads data without removing it. A stack is a LIFO-queue, meaning that the last data to be inserted will be the first data to be removed.

what is FIFO and LIFO
FIFO means the first element that placed in the data structure will be the first element that comes out when retrieved. LIFO means that the last element that was placed in the data structure will be the first one to be retrieved.

what is the order of complexity?
Order of complexity is a form of runtime analysis that measures the efficiency of an algorithm in terms of the time it takes for the algorithm to run as a function of the input size. It’s not a formal bench- mark, just a simple way to classify algorithms by relative efficiency when dealing with very large input sizes.


what is the best case to search an element from an array?
When the input array is already in sorted order

what is the worst case to search an element from an array?
When the input is reverse sorted

14. what is tree in data structure?
A tree is a data structure that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node, represented as a set of linked nodes.

15. what is graph in data structure?
A graph is a pictorial representation of a set of objects where some pairs of objects are connected by links. The interconnected objects are represented by points termed as vertices, and the links that connect the vertices are called edges.

16. what is the difference between the HashTable and HashMap?

Hashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.
Hashtable does not allow null keys or values. HashMap allows one null key and any number of null values.


17. What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.

RDBMS- Arrays
Network data model – Graph data structure
Hierarchical data model – Tree data structure



18. How HashMap works in java?
HashMap in Java works on hashing principle. It is a data structure which allows us to store object and retrieve it in constant time O(1) provided we know the key. In hashing, hash functions are used to link key and value in HashMap. Objects are stored by calling put(key, value) method of HashMap and retrieved by calling get(key) method. When we call put method, hashcode() method of the key object is called so that hash function of the map can find a bucket location to store value object, which is actually an index of the internal array, known as the table.


19.What is ArrayIndexOutOfBoundsException in java? When it occurs?
ArrayIndexOutOfBoundsException occurs when your code tries to access an invalid index for a given array.

20. What are the different ways of copying an array into another array?
a) Mannually
b) Arrays.copyOf();
c) System.arraycopy();
d) Object.clone();


20.What is difference between an array and a linked list?
The major difference between Array and Linked list regards to their structure. Arrays are index based data structure where each element associated with an index. On the other hand, Linked list relies on references where each node consists of the data and the references to the previous and next element.

21. What is DFS and BFS?
The breadth first search (BFS) and the depth first search (DFS) are the two algorithms used for traversing and searching a node in a graph. They can also be used to find out whether a node is reachable from a given node or not.


22. What is Recursion?
A recursive method is just a method that calls itself. As these calls are made the problem gets simpler until you reach a condition that leads to the method no longer making calls upon itself. This is known as the base case.

23. What are linear and non linear data Structures?

Linear Data Structures: The data structure where data items are organized sequentially or linearly where data elements attached one after another. Examples of linear data structures are Arrays, Stack, Queue and Linked List.
Non Linear Data Structures: The data structure where data items are not organized sequentially is called non linear data structure. In other words, A data elements of the non linear data structure could be connected to more than one elements to reflect a special relationship among them. All the data elements in non linear data structure can not be traversed in single run. Examples of non linear data structures are Trees and Graphs.



24. What is Big-(O)-notation?
Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used by an algorithm.


25. Outlined different kind of sorting algorithm with time complexity?

Sorting is ordering a list of objects. We can distinguish two types of sorting.
If the number of objects is small enough to fits into the main memory, sorting is called internal sorting.
If the number of objects is so large that some of them reside on external storage during the sort, it is called external sorting. In this chapter we consider the following internal sorting algorithms



Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.
Pros and cons of different data structures
Arrays -
Pros:
1. Access to an array element is fast since we can compute its location quickly.

Cons:
1. If we want to insert or delete an element, we have to shift subsequent elements which slows our computation down.
2. We need a large enough block of memory to hold our array.
3. Easily corrupted (One can easily inset data in middle)


Linked Lists -
Pros:
1. Inserting and deleting data does not require us to move/shift subsequent data elements.

Cons:
1. If we want to access a specific element, we need to traverse the list from the head of the list to find it which can take longer than an array access.
2. Linked lists require more memory.
3. Easily corrupted (One can easily inset data in middle)


Stack -
Pros:
1. Helps manage the data in particular way (LIFO) which is not possible with Linked list and array.
2. When function is called the local varriables are stored in stack and destroyed once returned. Stack is used when varriable is not used outside the function.
So, it gives control over how memory is allocated and deallocated
3. Stack frees you from the burden of remembering to cleanup(read delete) the object
4. Not easily corrupted (No one can easily inset data in middle)

Cons:
1. Stack memory is limited.
2. Creating too many objects on the stack will increase the chances of stack overflow
3. Random access not possible


Queue -
Pros:
1. Helps manage the data in particular way (FIFO). which is not possible with Linked list and array.
2. Not easily corrupted (No one can easily inset data in middle)

Cons:
1. Random access not possible


Tree -
Pros:
1. Searching is faster (with some ordering e.g., BST). we can search for a given key in moderate time (quicker than Linked List and slower than arrays).
2. Insert/delete keys in moderate time (quicker than Arrays and slower than Unordered Linked Lists).

Cons:
1. High overhead
2. Large waste of unused links
3. Predetermined limit on number of a node’s children

Heap -
Pros:
1. When the data in the variable is needed beyond the lifetime of the current function.
2. It can offer the maximum memory an OS can provide

Cons:
1. You must make sure to free the memory when you are done

Graph -
Pros:
1. Finding the path in efficient way

Cons:
1. High overhead
2. Large waste of unused links





